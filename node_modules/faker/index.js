// since we are requiring the top level of faker, load all locales by default
var Faker = require('./lib');
var faker = new Faker({ locales: require('./lib/locales') });
module['exports'] = faker;

const mysql = require('mysql2/promise');

faker.locale = "ko";

const firstName = faker.name.firstName();
const lastName = faker.name.lastName();
const fullName = lastName + firstName;
const insertedUserSeqs = [];
const insertedAccountNos = [];
const insertedCardNos = [];

// local
const host = 'localhost';
const user = 'root';
const database = 'mysqldb'
const password = 'mysqldb';

// aws
/*
const host = '';
const user = '';
const database = 'mysqldb';
const password = 'mysqldb';
*/
async function insertMemberData() {

    const connection = await mysql.createConnection({
        host: host,
        user: user,
        password: database,
        database: password
    });

    const numOfRows = 100;

    for (let i = 0; i < numOfRows; i++) {
        const userSeq = faker.datatype.uuid();
        const userNm = faker.name.findName();
        const loginId = faker.internet.userName();
        const loginPw = faker.internet.password();
        const email = faker.internet.email();

        // 공통코드 (상품추천항목 코드)
        const prdtRcmdItemCd = faker.random.arrayElement(['IC', 'CS', 'AG']);

        const lockYn = faker.random.arrayElement(['Y', 'N']);
        const secsnYn = faker.random.arrayElement(['Y', 'N']);
        const indvdlinfoAgreeYn = faker.random.arrayElement(['Y', 'N']);
        const profileImgUrl = faker.image.avatar();
        // const sexCd = faker.random.arrayElement(['MALE', 'FEMALE']);
        // const sexCd = faker.random.arrayElement([0, 1]);
        const sexCd = faker.random.arrayElement(['M', 'F', 'E']);

        const age = faker.datatype.number({ min: 18, max: 99 });
        const ageCd = Math.floor(age/10);

        // const occupationCd = faker.datatype.number({ min: 1, max: 9 });
        // 공통코드 (직업군 코드)
        const occupationCd = faker.random.arrayElement(['1', '2', '3', '4', '5', '6', '7', '8', '9', 'A']);

        const mobileTelNum = faker.phone.phoneNumber();
        const zipCd = faker.address.zipCode();
        const zipDetailAddr1 = faker.address.streetAddress();
        const zipDetailAddr2 = faker.address.secondaryAddress();

        try {
            await connection.execute(`
                INSERT INTO st_user (
                    user_seq, user_nm, login_id, login_pw, email,
                    prdt_rcmd_item_cd, lock_yn, secsn_yn, indvdlinfo_agree_yn,
                    profile_img_url, sex_cd, age_cd, age, occupation_cd,
                    mobile_tel_num, zip_cd, zip_detail_addr1, zip_detail_addr2
                ) VALUES (
                    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
                );
            `, [
                userSeq, userNm, loginId, loginPw, email,
                prdtRcmdItemCd, lockYn, secsnYn, indvdlinfoAgreeYn,
                profileImgUrl, sexCd, ageCd, age, occupationCd,
                mobileTelNum, zipCd, zipDetailAddr1, zipDetailAddr2
            ]);

            insertedUserSeqs.push(userSeq);
            console.log(`Member Row ${i + 1} inserted successfully.`);
        } catch (error) {
            console.error(`Error inserting member data: ${error.message}`);
        }
    }

    connection.end();

    return insertedUserSeqs;
}

async function insertUserAccountData() {
    const connection = await mysql.createConnection({
        host: host,
        user: user,
        password: password,
        database: database
    });

    const numOfRows = 100;

    for (let i = 0; i < numOfRows; i++) {
        const accountNo = faker.datatype.number({ min: 1000000000, max: 99999999999999 }).toString();
        var idx = faker.datatype.number({ min: 0, max: 99 });
        const seq = insertedUserSeqs[idx];
        // const seq = insertedUserSeqs[i];
        // const finPrdtCd = faker.lorem.word();
        // const finCoNo = faker.lorem.word();
        // const dclsMonth = faker.date.past().toISOString().split('T')[0];
        // const productNm = faker.lorem.words();
        // const accountSeq = faker.datatype.number();
        const accountIssueDate = faker.date.past().toISOString().slice(0, 19).replace('T', ' ');
        // const maturityDate = faker.date.future().toISOString().slice(0, 19).replace('T', ' ');

        const lastTranDate = faker.date.past().toISOString().slice(0, 19).replace('T', ' ');

        const productSubName = faker.lorem.words();
        const balanceAmt = faker.datatype.number({ min: 1, max: 100000 });
        const useYn = faker.random.arrayElement(['Y', 'N']);

        try {

            // api_products 에 존재하는 예적금 계좌 정보
            let [pRows, pField] = await connection.query(`
                SELECT fin_prdt_cd, fin_co_no, dcls_month, fin_prdt_nm FROM api_products
            `);
            var len = pRows.length;
            idx = faker.datatype.number({ min: 0, max: (len-1) });
            const finPrdtCd = pRows[idx].fin_prdt_cd;
            const finCoNo = pRows[idx].fin_co_no;
            const dclsMonth = pRows[idx].dcls_month;
            const productNm = pRows[idx].fin_prdt_nm;

            // api_products_option 에 존재하는 예적금 계좌 옵션 정보
            let [oRows, oField] = await connection.query(`
                SELECT fin_prdt_cd
                     , fin_co_no
                     , dcls_month
                     , prd_option_seq
                     , ? as account_issue_date
                     , DATE_ADD(?, INTERVAL save_trm MONTH) as maturity_date
                  FROM api_products_option 
                 WHERE fin_prdt_cd = ? 
                   AND fin_co_no = ? 
                   AND dcls_month = ?
            `, [accountIssueDate, accountIssueDate, finPrdtCd, finCoNo, dclsMonth]);
            // console.log("oRows :: ", oRows);

            len = oRows.length;
            idx = faker.datatype.number({ min: 0, max: (len-1) });
            // 계좌옵션순번
            const accountSeq = oRows[idx].prd_option_seq;
            // accountIssueDate + 계좌옵션순번에 해당하는 개월수
            const maturityDate = oRows[idx].maturity_date;

            await connection.execute(`
                INSERT INTO api_user_account (
                    account_no, user_seq, fin_prdt_cd, fin_co_no, dcls_month,
                    account_seq, account_issue_date, maturity_date, last_tran_date,
                    product_nm, product_sub_name, balance_amt, use_yn
                ) VALUES (
                    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
                );
            `, [accountNo, seq, finPrdtCd, finCoNo, dclsMonth, accountSeq, accountIssueDate, maturityDate, lastTranDate, productNm, productSubName, balanceAmt, useYn]);

            insertedAccountNos.push(accountNo);
            console.log(`User Row ${i + 1} inserted successfully.`);
        } catch (error) {
            console.error(`Error inserting user data: ${error.message}`);
        }
    }

    connection.end();

    return insertedAccountNos;
}

async function insertApiAccountDetailData() {
    const connection = await mysql.createConnection({
        host: host,
        user: user,
        password: password,
        database: database
    });

    const numOfRows = 100;

    for (let i = 0; i < numOfRows; i++) {
        const bankTranId = faker.datatype.number();
        var idx = faker.datatype.number({ min: 0, max: 99 });
        const accountNo = insertedAccountNos[idx];
        const tranDate = faker.date.past().toISOString().split('T')[0];
        const tranTime = faker.date.past().toLocaleTimeString('en-US', { hour12: false });
        const inoutTypeCd = faker.lorem.word();
        const printedContent = faker.lorem.sentence();
        const tranAmt = faker.datatype.number({ min: 1, max: 100000 });
        const afterBalanceAmt = faker.datatype.number({ min: 1, max: 100000 });
        const frncNum = faker.lorem.word();
        const frncBusinessNum = faker.lorem.word();
        const frncName = faker.company.companyName();
        const frncIdstrCd = faker.lorem.word();

        try {
            await connection.execute(`
                INSERT INTO api_account_detail (
                    bank_tran_id, account_no, tran_date, tran_time, inout_type_cd,
                    printed_content, tran_amt, after_balance_amt, frnc_num,
                    frnc_business_num, frnc_name, frnc_idstr_cd
                ) VALUES (
                    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
                );
            `, [bankTranId, accountNo, tranDate, tranTime, inoutTypeCd, printedContent, tranAmt, afterBalanceAmt, frncNum, frncBusinessNum, frncName, frncIdstrCd]);

            console.log(`Account Detail Row ${i + 1} inserted successfully.`);
        } catch (error) {
            console.error(`Error inserting account detail data: ${error.message}`);
        }
    }

    connection.end();
}

async function insertApiUserCardData() {
    const connection = await mysql.createConnection({
        host: host,
        user: user,
        password: password,
        database: database
    });
    const numOfRows = 100;

    try {
        for (let i = 0; i < numOfRows; i++) {
            const cardNo = faker.datatype.number();
            var idx = faker.datatype.number({ min: 0, max: 99 });
            const userSeq = insertedUserSeqs[idx];
            const cardNm = faker.lorem.word();
            
            // 공통코드 (카드사 코드)
            // const cardCoNo = faker.lorem.word();
            let [cRows, cField] = await connection.query(`
                SELECT code_id FROM st_code_master where grp_code_id = 'card_co_no'
            `);
            // console.log('cRows :: ', cRows);
            var len = cRows.length;
            idx = faker.datatype.number({ min: 0, max: (len-1) });
            const cardCoNo = cRows[idx].code_id;
            const cardPw = faker.lorem.word();
            const validThruYear = faker.datatype.number({ min: 21, max: 29 }).toString();
            const validThruMonth = faker.datatype.number({ min: 1, max: 12 }).toString().padStart(2, '0');
            const cvcCd = faker.datatype.number({ min: 100, max: 999 }).toString();
            const joinDate = faker.date.past();
            const userYn = faker.random.arrayElement(['Y', 'N']);

            await connection.execute(`
                INSERT INTO api_user_card (
                    card_no, user_seq, card_nm, card_co_no, card_pw,
                    valid_thru_year, valid_thru_month, cvc_cd, join_date, user_yn
                ) VALUES (
                    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
                );
            `, [cardNo, userSeq, cardNm, cardCoNo, cardPw, validThruYear, validThruMonth, cvcCd, joinDate, userYn]);

            insertedCardNos.push(cardNo);
            console.log(`Api User Card Row ${i + 1} inserted successfully.`);
        }
    } catch (error) {
        console.error(`Error inserting api_user_card data: ${error.message}`);
    } finally {
        connection.end();
    }

    return insertedCardNos;
}

async function insertApiCardDetailData() {
    const connection = await mysql.createConnection({
        host: host,
        user: user,
        password: password,
        database: database
    });
    const numOfRows = 100;

    try {
        for (let i = 0; i < numOfRows; i++) {
            const approvalNo = faker.datatype.number();
            const cardNo = faker.random.arrayElement(insertedCardNos);
            const businessType = faker.lorem.word();
            const companyName = faker.company.companyName();
            const registrationNumber = faker.random.uuid();
            const frncIdstrCd = faker.lorem.word();
            const approvalAmount = faker.datatype.number({ min: 1, max: 100000 });
            const approvalDate = faker.date.past();
            const installrationMonth = faker.datatype.number({ min: 1, max: 12 });

            await connection.execute(`
                INSERT INTO api_card_detail (
                    approval_no, card_no, business_type, company_name, registration_number,
                    frnc_idstr_cd, approval_amount, approval_date, installration_month
                ) VALUES (
                    ?, ?, ?, ?, ?, ?, ?, ?, ?
                );
            `, [approvalNo, cardNo, businessType, companyName, registrationNumber, frncIdstrCd, approvalAmount, approvalDate, installrationMonth]);

            console.log(`Api Card Detail Row ${i + 1} inserted successfully.`);
        }
    } catch (error) {
        console.error(`Error inserting api_card_detail data: ${error.message}`);
    } finally {
        connection.end();
    }
}


// 실행
insertMemberData()
    .then(() => insertUserAccountData())
    .then(() => insertApiAccountDetailData())
    .then(() => insertApiUserCardData())
    .then(() => insertApiCardDetailData())
    .catch(error => {
        console.error("An error occurred:", error);
    });