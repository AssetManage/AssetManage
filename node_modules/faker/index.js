// since we are requiring the top level of faker, load all locales by default
var Faker = require('./lib');
var faker = new Faker({ locales: require('./lib/locales') });
module['exports'] = faker;

const mysql = require('mysql2/promise');

faker.locale = "ko";

const firstName = faker.name.firstName();
const lastName = faker.name.lastName();
const fullName = lastName + firstName;

async function insertData() {
    const connection = await mysql.createConnection({
        host: 'localhost',
        user: 'root',
        password: 'mysqldb',
        database: 'mysqlDbls'
    });

    const numOfRows = 100;
    const businessTypes = [
        '서비스업',
        '제조업',
        '도매 및 소매업',
        'IT 및 소프트웨어 개발',
        '건설업',
        '의료 서비스',
        '금융 및 보험업',
        '문화 및 예술',
        '식품 및 음료 제조',
        '환경 서비스',
        '교육 서비스',
        '운송 및 물류',
        '농업 및 임업',
        '부동산',
        '전기 및 전자 제조',
        '패션 및 의류',
        '통신 서비스',
        '화학 및 제약',
        '에너지 및 자원',
        '광고 및 마케팅',
        '스포츠 및 여가',
        '컨설팅 서비스',
        '자동차 및 운송수단 제조'
    ];



    for (let i = 0; i < numOfRows; i++) {
        // cardNumber 카드테이블과 mapping 수정요함
        const cardNumber = faker.random.number({ min: 1000000000000000, max: 9999999999999999 }).toString();
        //const businessType = faker.locales.ko.company.bs_noun();
        const businessType = faker.random.arrayElement(businessTypes);
        const businessAddress = faker.address.streetAddress();
        //const registrationNumber = faker.random.alphaNumeric(10);
        const registrationNumber = `${faker.random.number({ min: 100, max: 999 })}-${faker.random.number({ min: 10, max: 99 })}-${faker.random.number({ min: 10000, max: 99999 })}`;
        const approvalAmount = faker.datatype.number({ min: 1000, max: 1000000 });
        const approvalDate = faker.date.past().toISOString().split('T')[0];
        const approvalNumber = faker.random.number({ min: 10000000, max: 99999999 }).toString();
        const installment = faker.datatype.number({ min: 0, max: 12 });
        const companyName = faker.company.companyName();

        try {
            await connection.execute(`
            INSERT INTO transaction (
                card_number, business_type, business_address,
                registration_number, approval_amount, approval_date, 
                approval_number, installment, company_name
            ) VALUES (
                ?, ?, ?, ?, ?, ?, ?, ?, ?
            );
        `, [cardNumber, businessType, businessAddress, registrationNumber, approvalAmount, approvalDate, approvalNumber, installment, companyName]);

            console.log(`Row ${i + 1} inserted successfully.`);
        } catch (error) {
            console.error(`Error inserting data: ${error.message}`);
        }


    }

    connection.end();
}

// 실행
insertData();