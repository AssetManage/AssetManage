// since we are requiring the top level of faker, load all locales by default
var Faker = require('./lib');
var faker = new Faker({ locales: require('./lib/locales') });
module['exports'] = faker;

const mysql = require('mysql2/promise');

faker.locale = "ko";

const firstName = faker.name.firstName();
const lastName = faker.name.lastName();
const fullName = lastName + firstName;

console.log(fullName);
async function insertData() {
    const connection = await mysql.createConnection({
        host: 'localhost',
        user: 'root',
        password: 'mysqldb',
        database: 'mysqlDbls'
    });

    const numOfRows = 10;

    for (let i = 0; i < numOfRows; i++) {
        const cardNumber = faker.random.number({ min: 1000000000000000, max: 9999999999999999 }).toString();
        const memberNumber = faker.datatype.number();
        const businessType = faker.company.bs();
        const businessAddress = faker.address.streetAddress();
        const registrationNumber = faker.random.alphaNumeric(10);
        const approvalAmount = faker.datatype.number({ min: 1000, max: 10000 });
        const approvalDate = faker.date.past().toISOString().split('T')[0];
        const approvalNumber = faker.random.alphaNumeric(10);
        const installment = faker.datatype.number({ min: 1, max: 12 });
        const companyName = faker.company.companyName();

        try {
            await connection.execute(`
                INSERT INTO transaction (
                    card_number, member_number, business_type, business_address,
                    registration_number, approval_amount, approval_date, 
                    approval_number, installment, company_name
                ) VALUES (
                    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
                );
            `, [cardNumber, memberNumber, businessType, businessAddress, registrationNumber, approvalAmount, approvalDate, approvalNumber, installment, companyName]);

            console.log(`Row ${i + 1} inserted successfully.`);
        } catch (error) {
            console.error(`Error inserting data: ${error.message}`);
        }
    }

    connection.end();
}

// 실행
insertData();